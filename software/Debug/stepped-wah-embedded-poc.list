
stepped-wah-embedded-poc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036c8  080036c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000148  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000079db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001977  00000000  00000000  00027a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00029390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005f8  00000000  00000000  00029a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c76  00000000  00000000  0002a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000918b  00000000  00000000  0004bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfbaa  00000000  00000000  00054e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001249f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019d0  00000000  00000000  00124a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003664 	.word	0x08003664

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003664 	.word	0x08003664

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fc74 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f814 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8d8 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f8ae 	bl	8000660 <MX_DMA_Init>
  MX_I2S2_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, 4);
 8000508:	2304      	movs	r3, #4
 800050a:	4a03      	ldr	r2, [pc, #12]	; (8000518 <main+0x28>)
 800050c:	4903      	ldr	r1, [pc, #12]	; (800051c <main+0x2c>)
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x30>)
 8000510:	f001 fd66 	bl	8001fe0 <HAL_I2SEx_TransmitReceive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x24>
 8000516:	bf00      	nop
 8000518:	20000130 	.word	0x20000130
 800051c:	20000140 	.word	0x20000140
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 f88e 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
   */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <SystemClock_Config+0xd8>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000550:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <SystemClock_Config+0xd8>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xd8>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xd8>)
 800055e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000562:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <SystemClock_Config+0xd8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a23      	ldr	r2, [pc, #140]	; (80005fc <SystemClock_Config+0xd8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <SystemClock_Config+0xd8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemClock_Config+0xdc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <SystemClock_Config+0xdc>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <SystemClock_Config+0xdc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f9a5 	bl	8002908 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c4:	f000 fa6b 	bl	8000a9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fc07 	bl	8002df8 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f0:	f000 fa55 	bl	8000a9e <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_I2S2_Init+0x54>)
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_I2S2_Init+0x58>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2S2_Init+0x54>)
 8000610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000614:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_I2S2_Init+0x54>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2S2_Init+0x54>)
 800061e:	2203      	movs	r2, #3
 8000620:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_I2S2_Init+0x54>)
 8000624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000628:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_I2S2_Init+0x54>)
 800062c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000630:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2S2_Init+0x54>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2S2_Init+0x54>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2S2_Init+0x54>)
 8000640:	2201      	movs	r2, #1
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2S2_Init+0x54>)
 8000646:	f001 fa85 	bl	8001b54 <HAL_I2S_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000650:	f000 fa25 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028
 800065c:	40003800 	.word	0x40003800

08000660 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_DMA_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_DMA_Init+0x4c>)
 8000670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_DMA_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	200e      	movs	r0, #14
 8000688:	f000 fcf7 	bl	800107a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800068c:	200e      	movs	r0, #14
 800068e:	f000 fd10 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	200f      	movs	r0, #15
 8000698:	f000 fcef 	bl	800107a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 fd08 	bl	80010b2 <HAL_NVIC_EnableIRQ>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	4b84      	ldr	r3, [pc, #528]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a83      	ldr	r2, [pc, #524]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b81      	ldr	r3, [pc, #516]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a7c      	ldr	r2, [pc, #496]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b7a      	ldr	r3, [pc, #488]	; (80008dc <MX_GPIO_Init+0x22c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b76      	ldr	r3, [pc, #472]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a75      	ldr	r2, [pc, #468]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b73      	ldr	r3, [pc, #460]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b6f      	ldr	r3, [pc, #444]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a6e      	ldr	r2, [pc, #440]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b6c      	ldr	r3, [pc, #432]	; (80008dc <MX_GPIO_Init+0x22c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b68      	ldr	r3, [pc, #416]	; (80008dc <MX_GPIO_Init+0x22c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a67      	ldr	r2, [pc, #412]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b61      	ldr	r3, [pc, #388]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a60      	ldr	r2, [pc, #384]	; (80008dc <MX_GPIO_Init+0x22c>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <MX_GPIO_Init+0x22c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f244 0181 	movw	r1, #16513	; 0x4081
 8000774:	485a      	ldr	r0, [pc, #360]	; (80008e0 <MX_GPIO_Init+0x230>)
 8000776:	f001 f9d3 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4859      	ldr	r0, [pc, #356]	; (80008e4 <MX_GPIO_Init+0x234>)
 8000780:	f001 f9ce 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4853      	ldr	r0, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x238>)
 800079c:	f001 f814 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80007a0:	2332      	movs	r3, #50	; 0x32
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484b      	ldr	r0, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x238>)
 80007bc:	f001 f804 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 80007c0:	2386      	movs	r3, #134	; 0x86
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4844      	ldr	r0, [pc, #272]	; (80008ec <MX_GPIO_Init+0x23c>)
 80007dc:	f000 fff4 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80007e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4839      	ldr	r0, [pc, #228]	; (80008e0 <MX_GPIO_Init+0x230>)
 80007fa:	f000 ffe5 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000810:	230b      	movs	r3, #11
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4831      	ldr	r0, [pc, #196]	; (80008e0 <MX_GPIO_Init+0x230>)
 800081c:	f000 ffd4 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000832:	2307      	movs	r3, #7
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	482c      	ldr	r0, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x240>)
 800083e:	f000 ffc3 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4822      	ldr	r0, [pc, #136]	; (80008e4 <MX_GPIO_Init+0x234>)
 800085a:	f000 ffb5 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x234>)
 8000872:	f000 ffa9 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000876:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000888:	230a      	movs	r3, #10
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4816      	ldr	r0, [pc, #88]	; (80008ec <MX_GPIO_Init+0x23c>)
 8000894:	f000 ff98 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <MX_GPIO_Init+0x23c>)
 80008ae:	f000 ff8b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80008b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c4:	230b      	movs	r3, #11
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x234>)
 80008d0:	f000 ff7a 	bl	80017c8 <HAL_GPIO_Init>
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020c00 	.word	0x40020c00

080008f4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	b08d      	sub	sp, #52	; 0x34
 80008f8:	af08      	add	r7, sp, #32
 80008fa:	6078      	str	r0, [r7, #4]

  // restore signed 24 bit sample from 16-bit buffers
  int lSample = (int)(rxBuf[0] << 16) | rxBuf[1];
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000904:	8852      	ldrh	r2, [r2, #2]
 8000906:	4313      	orrs	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  int rSample = (int)(rxBuf[2] << 16) | rxBuf[3];
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 800090c:	889b      	ldrh	r3, [r3, #4]
 800090e:	041b      	lsls	r3, r3, #16
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000912:	88d2      	ldrh	r2, [r2, #6]
 8000914:	4313      	orrs	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]

  lSample = 40 * calc_iir(lSample, filter_band);
 8000918:	4e16      	ldr	r6, [pc, #88]	; (8000974 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 800091a:	466d      	mov	r5, sp
 800091c:	f106 040c 	add.w	r4, r6, #12
 8000920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000928:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800092c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f000 f867 	bl	8000a04 <calc_iir>
 8000936:	4602      	mov	r2, r0
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	60fb      	str	r3, [r7, #12]

  // restore to buffer
  txBuf[0] = (lSample >> 16) & 0xFFFF;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_I2SEx_TxRxHalfCpltCallback+0x84>)
 800094a:	801a      	strh	r2, [r3, #0]
  txBuf[1] = lSample & 0xFFFF;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_I2SEx_TxRxHalfCpltCallback+0x84>)
 8000952:	805a      	strh	r2, [r3, #2]
  txBuf[2] = (lSample >> 16) & 0xFFFF;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_I2SEx_TxRxHalfCpltCallback+0x84>)
 800095c:	809a      	strh	r2, [r3, #4]
  txBuf[3] = lSample & 0xFFFF;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_I2SEx_TxRxHalfCpltCallback+0x84>)
 8000964:	80da      	strh	r2, [r3, #6]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	bf00      	nop
 8000970:	20000130 	.word	0x20000130
 8000974:	0800367c 	.word	0x0800367c
 8000978:	20000140 	.word	0x20000140

0800097c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	b08d      	sub	sp, #52	; 0x34
 8000980:	af08      	add	r7, sp, #32
 8000982:	6078      	str	r0, [r7, #4]

  // restore signed 24 bit sample from 16-bit buffers
  int lSample = (int)(rxBuf[4] << 16) | rxBuf[5];
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000986:	891b      	ldrh	r3, [r3, #8]
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800098c:	8952      	ldrh	r2, [r2, #10]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  int rSample = (int)(rxBuf[6] << 16) | rxBuf[7];
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000994:	899b      	ldrh	r3, [r3, #12]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800099a:	89d2      	ldrh	r2, [r2, #14]
 800099c:	4313      	orrs	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]

  lSample = 40 * calc_iir(lSample, filter_band);
 80009a0:	4e16      	ldr	r6, [pc, #88]	; (80009fc <HAL_I2SEx_TxRxCpltCallback+0x80>)
 80009a2:	466d      	mov	r5, sp
 80009a4:	f106 040c 	add.w	r4, r6, #12
 80009a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009b4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 f823 	bl	8000a04 <calc_iir>
 80009be:	4602      	mov	r2, r0
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	60fb      	str	r3, [r7, #12]

  // restore to buffer
  txBuf[4] = (lSample >> 16) & 0xFFFF;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	0c1b      	lsrs	r3, r3, #16
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_I2SEx_TxRxCpltCallback+0x84>)
 80009d2:	811a      	strh	r2, [r3, #8]
  txBuf[5] = lSample & 0xFFFF;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_I2SEx_TxRxCpltCallback+0x84>)
 80009da:	815a      	strh	r2, [r3, #10]
  txBuf[6] = (lSample >> 16) & 0xFFFF;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	0c1b      	lsrs	r3, r3, #16
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_I2SEx_TxRxCpltCallback+0x84>)
 80009e4:	819a      	strh	r2, [r3, #12]
  txBuf[7] = lSample & 0xFFFF;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2SEx_TxRxCpltCallback+0x84>)
 80009ec:	81da      	strh	r2, [r3, #14]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000130 	.word	0x20000130
 80009fc:	0800367c 	.word	0x0800367c
 8000a00:	20000140 	.word	0x20000140

08000a04 <calc_iir>:

int calc_iir(int inSample, filter_t filter)
{
 8000a04:	b084      	sub	sp, #16
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	f107 001c 	add.w	r0, r7, #28
 8000a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  float inSampleF = (float)inSample;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	edc7 7a03 	vstr	s15, [r7, #12]
  float outSampleF = filter.a0 * inSampleF +
 8000a24:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
                     filter.a1 * filter.in_z1 +
 8000a30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000a34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float outSampleF = filter.a0 * inSampleF +
 8000a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                     filter.a2 * filter.in_z2 -
 8000a40:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000a44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     filter.a1 * filter.in_z1 +
 8000a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
                     filter.b1 * filter.out_z1 -
 8000a50:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000a54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     filter.a2 * filter.in_z2 -
 8000a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
                     filter.b2 * filter.out_z2;
 8000a60:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float outSampleF = filter.a0 * inSampleF +
 8000a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a70:	edc7 7a02 	vstr	s15, [r7, #8]
  filter.in_z2 = filter.in_z1;
 8000a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  filter.in_z1 = inSampleF;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  filter.out_z2 = filter.out_z1;
 8000a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  filter.out_z1 = outSampleF;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40

  return (int)outSampleF;
 8000a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a8c:	ee17 3a90 	vmov	r3, s15
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4770      	bx	lr

08000a9e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
}
 8000aa4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b096      	sub	sp, #88	; 0x58
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2230      	movs	r2, #48	; 0x30
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fd9b 	bl	8003654 <memset>
  if(hi2s->Instance==SPI2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a6a      	ldr	r2, [pc, #424]	; (8000ccc <HAL_I2S_MspInit+0x1d4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	f040 80cc 	bne.w	8000cc2 <HAL_I2S_MspInit+0x1ca>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b2e:	23c0      	movs	r3, #192	; 0xc0
 8000b30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb48 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000b46:	f7ff ffaa 	bl	8000a9e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a5f      	ldr	r2, [pc, #380]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b5d      	ldr	r3, [pc, #372]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a51      	ldr	r2, [pc, #324]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <HAL_I2S_MspInit+0x1d8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4846      	ldr	r0, [pc, #280]	; (8000cd4 <HAL_I2S_MspInit+0x1dc>)
 8000bba:	f000 fe05 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000bbe:	2348      	movs	r3, #72	; 0x48
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	483e      	ldr	r0, [pc, #248]	; (8000cd4 <HAL_I2S_MspInit+0x1dc>)
 8000bda:	f000 fdf5 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4837      	ldr	r0, [pc, #220]	; (8000cd8 <HAL_I2S_MspInit+0x1e0>)
 8000bfc:	f000 fde4 	bl	80017c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c02:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <HAL_I2S_MspInit+0x1e8>)
 8000c04:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c08:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c0c:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c20:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c28:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000c46:	4825      	ldr	r0, [pc, #148]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c48:	f000 fa4e 	bl	80010e8 <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2S_MspInit+0x15e>
    {
      Error_Handler();
 8000c52:	f7ff ff24 	bl	8000a9e <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_I2S_MspInit+0x1e4>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_I2S_MspInit+0x1f0>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000ca8:	f000 fa1e 	bl	80010e8 <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2S_MspInit+0x1be>
    {
      Error_Handler();
 8000cb2:	f7ff fef4 	bl	8000a9e <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_I2S_MspInit+0x1ec>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3758      	adds	r7, #88	; 0x58
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003800 	.word	0x40003800
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	20000070 	.word	0x20000070
 8000ce0:	40026058 	.word	0x40026058
 8000ce4:	200000d0 	.word	0x200000d0
 8000ce8:	40026070 	.word	0x40026070

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8a4 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Stream3_IRQHandler+0x10>)
 8000d46:	f000 fad5 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000070 	.word	0x20000070

08000d54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <DMA1_Stream4_IRQHandler+0x10>)
 8000d5a:	f000 facb 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000d0 	.word	0x200000d0

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f002 fc27 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fb97 	bl	80004f0 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	080036d0 	.word	0x080036d0
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000154 	.word	0x20000154

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f92b 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe48 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f943 	bl	80010ce <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e60:	f000 f90b 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000150 	.word	0x20000150

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000150 	.word	0x20000150

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff feda 	bl	8000eac <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e099      	b.n	8001238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	e00f      	b.n	8001146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001126:	f7ff fec1 	bl	8000eac <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b05      	cmp	r3, #5
 8001132:	d908      	bls.n	8001146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2220      	movs	r2, #32
 8001138:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e078      	b.n	8001238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e8      	bne.n	8001126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_DMA_Init+0x158>)
 8001160:	4013      	ands	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	2b04      	cmp	r3, #4
 800119e:	d107      	bne.n	80011b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4313      	orrs	r3, r2
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f023 0307 	bic.w	r3, r3, #7
 80011c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d117      	bne.n	800120a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00e      	beq.n	800120a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fa6f 	bl	80016d0 <DMA_CheckFifoParam>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001206:	2301      	movs	r3, #1
 8001208:	e016      	b.n	8001238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fa26 	bl	8001664 <DMA_CalcBaseAndBitshift>
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001220:	223f      	movs	r2, #63	; 0x3f
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	f010803f 	.word	0xf010803f

08001244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_DMA_Start_IT+0x26>
 8001266:	2302      	movs	r3, #2
 8001268:	e040      	b.n	80012ec <HAL_DMA_Start_IT+0xa8>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d12f      	bne.n	80012de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f9b8 	bl	8001608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	223f      	movs	r2, #63	; 0x3f
 800129e:	409a      	lsls	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0216 	orr.w	r2, r2, #22
 80012b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0208 	orr.w	r2, r2, #8
 80012ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e005      	b.n	80012ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001300:	4b8e      	ldr	r3, [pc, #568]	; (800153c <HAL_DMA_IRQHandler+0x248>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a8e      	ldr	r2, [pc, #568]	; (8001540 <HAL_DMA_IRQHandler+0x24c>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0a9b      	lsrs	r3, r3, #10
 800130c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131e:	2208      	movs	r2, #8
 8001320:	409a      	lsls	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01a      	beq.n	8001360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0204 	bic.w	r2, r2, #4
 8001346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2208      	movs	r2, #8
 800134e:	409a      	lsls	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	2201      	movs	r2, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d012      	beq.n	8001396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	2201      	movs	r2, #1
 8001384:	409a      	lsls	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2204      	movs	r2, #4
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2204      	movs	r2, #4
 80013ba:	409a      	lsls	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f043 0204 	orr.w	r2, r3, #4
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2210      	movs	r2, #16
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d043      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03c      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2210      	movs	r2, #16
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d018      	beq.n	8001436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d024      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
 8001422:	e01f      	b.n	8001464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01b      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
 8001434:	e016      	b.n	8001464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0208 	bic.w	r2, r2, #8
 8001452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	2220      	movs	r2, #32
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 808f 	beq.w	8001594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8087 	beq.w	8001594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2220      	movs	r2, #32
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b05      	cmp	r3, #5
 800149c:	d136      	bne.n	800150c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0216 	bic.w	r2, r2, #22
 80014ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d103      	bne.n	80014ce <HAL_DMA_IRQHandler+0x1da>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0208 	bic.w	r2, r2, #8
 80014dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e2:	223f      	movs	r2, #63	; 0x3f
 80014e4:	409a      	lsls	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d07e      	beq.n	8001600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
        }
        return;
 800150a:	e079      	b.n	8001600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01d      	beq.n	8001556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10d      	bne.n	8001544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	2b00      	cmp	r3, #0
 800152e:	d031      	beq.n	8001594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
 8001538:	e02c      	b.n	8001594 <HAL_DMA_IRQHandler+0x2a0>
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000
 8001540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	4798      	blx	r3
 8001554:	e01e      	b.n	8001594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10f      	bne.n	8001584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0210 	bic.w	r2, r2, #16
 8001572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	2b00      	cmp	r3, #0
 800159a:	d032      	beq.n	8001602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d022      	beq.n	80015ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2205      	movs	r2, #5
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d307      	bcc.n	80015dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f2      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x2cc>
 80015da:	e000      	b.n	80015de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
 80015fe:	e000      	b.n	8001602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001600:	bf00      	nop
    }
  }
}
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d108      	bne.n	8001648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001646:	e007      	b.n	8001658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3b10      	subs	r3, #16
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <DMA_CalcBaseAndBitshift+0x68>)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d909      	bls.n	80016a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	1d1a      	adds	r2, r3, #4
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58
 80016a4:	e007      	b.n	80016b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	aaaaaaab 	.word	0xaaaaaaab
 80016cc:	080036b8 	.word	0x080036b8

080016d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11f      	bne.n	800172a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d856      	bhi.n	800179e <DMA_CheckFifoParam+0xce>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <DMA_CheckFifoParam+0x28>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001709 	.word	0x08001709
 80016fc:	0800171b 	.word	0x0800171b
 8001700:	08001709 	.word	0x08001709
 8001704:	0800179f 	.word	0x0800179f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d046      	beq.n	80017a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001718:	e043      	b.n	80017a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001722:	d140      	bne.n	80017a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001728:	e03d      	b.n	80017a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001732:	d121      	bne.n	8001778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d837      	bhi.n	80017aa <DMA_CheckFifoParam+0xda>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <DMA_CheckFifoParam+0x70>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	08001757 	.word	0x08001757
 8001748:	08001751 	.word	0x08001751
 800174c:	08001769 	.word	0x08001769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      break;
 8001754:	e030      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d025      	beq.n	80017ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001766:	e022      	b.n	80017ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001770:	d11f      	bne.n	80017b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001776:	e01c      	b.n	80017b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d903      	bls.n	8001786 <DMA_CheckFifoParam+0xb6>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d003      	beq.n	800178c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001784:	e018      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
      break;
 800178a:	e015      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00e      	beq.n	80017b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
      break;
 800179c:	e00b      	b.n	80017b6 <DMA_CheckFifoParam+0xe6>
      break;
 800179e:	bf00      	nop
 80017a0:	e00a      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;
 80017a2:	bf00      	nop
 80017a4:	e008      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;
 80017a6:	bf00      	nop
 80017a8:	e006      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;
 80017aa:	bf00      	nop
 80017ac:	e004      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e002      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017b2:	bf00      	nop
 80017b4:	e000      	b.n	80017b8 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
    }
  } 
  
  return status; 
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e177      	b.n	8001ad4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8166 	bne.w	8001ace <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	2b02      	cmp	r3, #2
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80c0 	beq.w	8001ace <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196a:	4a61      	ldr	r2, [pc, #388]	; (8001af0 <HAL_GPIO_Init+0x328>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_GPIO_Init+0x32c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d037      	beq.n	8001a06 <HAL_GPIO_Init+0x23e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_GPIO_Init+0x330>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_GPIO_Init+0x23a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x334>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x236>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_GPIO_Init+0x338>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x232>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a54      	ldr	r2, [pc, #336]	; (8001b04 <HAL_GPIO_Init+0x33c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x22e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <HAL_GPIO_Init+0x340>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x22a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_GPIO_Init+0x344>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x226>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_GPIO_Init+0x348>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x222>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_GPIO_Init+0x34c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x21e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <HAL_GPIO_Init+0x350>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x21a>
 80019de:	2309      	movs	r3, #9
 80019e0:	e012      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019e2:	230a      	movs	r3, #10
 80019e4:	e010      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019e6:	2308      	movs	r3, #8
 80019e8:	e00e      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019ea:	2307      	movs	r3, #7
 80019ec:	e00c      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019ee:	2306      	movs	r3, #6
 80019f0:	e00a      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019f2:	2305      	movs	r3, #5
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x328>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f ae84 	bls.w	80017e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40021c00 	.word	0x40021c00
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022400 	.word	0x40022400
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b3c:	e003      	b.n	8001b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e128      	b.n	8001db8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a90      	ldr	r2, [pc, #576]	; (8001dc0 <HAL_I2S_Init+0x26c>)
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe ffb9 	bl	8000af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d060      	beq.n	8001c74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e001      	b.n	8001bc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d802      	bhi.n	8001bd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f001 fcbc 	bl	8003550 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be2:	d125      	bne.n	8001c30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	3305      	adds	r3, #5
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e01f      	b.n	8001c4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	3305      	adds	r3, #5
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e00e      	b.n	8001c4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	3305      	adds	r3, #5
 8001c4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4a5c      	ldr	r2, [pc, #368]	; (8001dc4 <HAL_I2S_Init+0x270>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	08db      	lsrs	r3, r3, #3
 8001c58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e003      	b.n	8001c7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d902      	bls.n	8001c88 <HAL_I2S_Init+0x134>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d907      	bls.n	8001c98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e08f      	b.n	8001db8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cb6:	f023 030f 	bic.w	r3, r3, #15
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6851      	ldr	r1, [r2, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68d2      	ldr	r2, [r2, #12]
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6992      	ldr	r2, [r2, #24]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d161      	bne.n	8001da8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a38      	ldr	r2, [pc, #224]	; (8001dc8 <HAL_I2S_Init+0x274>)
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a37      	ldr	r2, [pc, #220]	; (8001dcc <HAL_I2S_Init+0x278>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2S_Init+0x1a4>
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_I2S_Init+0x27c>)
 8001cf6:	e001      	b.n	8001cfc <HAL_I2S_Init+0x1a8>
 8001cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	4932      	ldr	r1, [pc, #200]	; (8001dcc <HAL_I2S_Init+0x278>)
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2S_Init+0x1b8>
 8001d08:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d0a:	e001      	b.n	8001d10 <HAL_I2S_Init+0x1bc>
 8001d0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <HAL_I2S_Init+0x278>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_I2S_Init+0x1d4>
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d26:	e001      	b.n	8001d2c <HAL_I2S_Init+0x1d8>
 8001d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HAL_I2S_Init+0x278>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_I2S_Init+0x1ea>
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d3c:	e001      	b.n	8001d42 <HAL_I2S_Init+0x1ee>
 8001d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4e:	d003      	beq.n	8001d58 <HAL_I2S_Init+0x204>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e001      	b.n	8001d64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	897b      	ldrh	r3, [r7, #10]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_I2S_Init+0x278>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2S_Init+0x24c>
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d9e:	e001      	b.n	8001da4 <HAL_I2S_Init+0x250>
 8001da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da4:	897a      	ldrh	r2, [r7, #10]
 8001da6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08001ecb 	.word	0x08001ecb
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	080022f5 	.word	0x080022f5
 8001dcc:	40003800 	.word	0x40003800
 8001dd0:	40003400 	.word	0x40003400

08001dd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	1c9a      	adds	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffb8 	bl	8001dd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	1c9a      	adds	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10e      	bne.n	8001ec2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eb2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff93 	bl	8001de8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d13a      	bne.n	8001f5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d109      	bne.n	8001f04 <I2S_IRQHandler+0x3a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d102      	bne.n	8001f04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffb4 	bl	8001e6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d126      	bne.n	8001f5c <I2S_IRQHandler+0x92>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d11f      	bne.n	8001f5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff50 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d136      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d109      	bne.n	8001f86 <I2S_IRQHandler+0xbc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d102      	bne.n	8001f86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff45 	bl	8001e10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d122      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d11b      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff13 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d002      	beq.n	800200c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800200a:	e160      	b.n	80022ce <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e15a      	b.n	80022d8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800202e:	2302      	movs	r3, #2
 8002030:	e152      	b.n	80022d8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d002      	beq.n	800205e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d114      	bne.n	8002088 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	865a      	strh	r2, [r3, #50]	; 0x32
 8002086:	e00b      	b.n	80020a0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	4a8b      	ldr	r2, [pc, #556]	; (80022e0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	4a89      	ldr	r2, [pc, #548]	; (80022e8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80020c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	2200      	movs	r2, #0
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4a83      	ldr	r2, [pc, #524]	; (80022e8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f0:	d002      	beq.n	80020f8 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d16b      	bne.n	80021d0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a79      	ldr	r2, [pc, #484]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800210a:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800210c:	e001      	b.n	8002112 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800210e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002112:	330c      	adds	r3, #12
 8002114:	4619      	mov	r1, r3
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800211e:	b29b      	uxth	r3, r3
 8002120:	f7ff f890 	bl	8001244 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a70      	ldr	r2, [pc, #448]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800212e:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002130:	e001      	b.n	8002136 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	496b      	ldr	r1, [pc, #428]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800213e:	428b      	cmp	r3, r1
 8002140:	d101      	bne.n	8002146 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002142:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002144:	e001      	b.n	800214a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	b29b      	uxth	r3, r3
 800216c:	f7ff f86a 	bl	8001244 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0202 	orr.w	r2, r2, #2
 800217e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	f000 809e 	beq.w	80022ce <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a55      	ldr	r2, [pc, #340]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800219c:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800219e:	e001      	b.n	80021a4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80021a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4950      	ldr	r1, [pc, #320]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80021b0:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021b2:	e001      	b.n	80021b8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021bc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021cc:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80021ce:	e07e      	b.n	80022ce <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021de:	d10a      	bne.n	80021f6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a38      	ldr	r2, [pc, #224]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002210:	e001      	b.n	8002216 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002216:	330c      	adds	r3, #12
 8002218:	461a      	mov	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b29b      	uxth	r3, r3
 8002220:	f7ff f810 	bl	8001244 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002230:	e001      	b.n	8002236 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	492b      	ldr	r1, [pc, #172]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800223e:	428b      	cmp	r3, r1
 8002240:	d101      	bne.n	8002246 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002244:	e001      	b.n	800224a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800224a:	f042 0202 	orr.w	r2, r2, #2
 800224e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	4619      	mov	r1, r3
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002268:	b29b      	uxth	r3, r3
 800226a:	f7fe ffeb 	bl	8001244 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d01e      	beq.n	80022cc <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800229a:	e001      	b.n	80022a0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800229c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4911      	ldr	r1, [pc, #68]	; (80022ec <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022ae:	e001      	b.n	80022b4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80022b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022b8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	e000      	b.n	80022ce <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80022cc:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800259d 	.word	0x0800259d
 80022e4:	080025b9 	.word	0x080025b9
 80022e8:	08002691 	.word	0x08002691
 80022ec:	40003800 	.word	0x40003800
 80022f0:	40003400 	.word	0x40003400

080022f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a92      	ldr	r2, [pc, #584]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800230e:	4b92      	ldr	r3, [pc, #584]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002310:	e001      	b.n	8002316 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8b      	ldr	r2, [pc, #556]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800232c:	4b8a      	ldr	r3, [pc, #552]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800232e:	e001      	b.n	8002334 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d004      	beq.n	800234c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8099 	bne.w	800247e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9d5 	bl	8002710 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa78 	bl	8002870 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d13a      	bne.n	8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d035      	beq.n	8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023a0:	e001      	b.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80023a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4969      	ldr	r1, [pc, #420]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023ae:	428b      	cmp	r3, r1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023b2:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023b4:	e001      	b.n	80023ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fcfe 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	f040 80c3 	bne.w	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80bd 	beq.w	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002426:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002434:	e001      	b.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4944      	ldr	r1, [pc, #272]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002442:	428b      	cmp	r3, r1
 8002444:	d101      	bne.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002448:	e001      	b.n	800244e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800244a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800244e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002452:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fcc0 	bl	8001dfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800247c:	e089      	b.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d107      	bne.n	8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f96e 	bl	8002774 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f9ad 	bl	800280c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d12f      	bne.n	800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d02a      	beq.n	800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024e2:	e001      	b.n	80024e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80024e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4919      	ldr	r1, [pc, #100]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024f6:	e001      	b.n	80024fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80024f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002500:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0202 	orr.w	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fc70 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b08      	cmp	r3, #8
 8002524:	d136      	bne.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d031      	beq.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800253c:	e001      	b.n	8002542 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800253e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4902      	ldr	r1, [pc, #8]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800254a:	428b      	cmp	r3, r1
 800254c:	d106      	bne.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800254e:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002550:	e006      	b.n	8002560 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002552:	bf00      	nop
 8002554:	40003800 	.word	0x40003800
 8002558:	40003400 	.word	0x40003400
 800255c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002564:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002574:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fc36 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002590:	e000      	b.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002592:	bf00      	nop
}
 8002594:	bf00      	nop
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7fe f9a2 	bl	80008f4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d155      	bne.n	800267a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d006      	beq.n	80025ec <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11e      	bne.n	800262a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <I2SEx_TxRxDMACplt+0xd0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <I2SEx_TxRxDMACplt+0x42>
 80025f6:	4b25      	ldr	r3, [pc, #148]	; (800268c <I2SEx_TxRxDMACplt+0xd4>)
 80025f8:	e001      	b.n	80025fe <I2SEx_TxRxDMACplt+0x46>
 80025fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4920      	ldr	r1, [pc, #128]	; (8002688 <I2SEx_TxRxDMACplt+0xd0>)
 8002606:	428b      	cmp	r3, r1
 8002608:	d101      	bne.n	800260e <I2SEx_TxRxDMACplt+0x56>
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <I2SEx_TxRxDMACplt+0xd4>)
 800260c:	e001      	b.n	8002612 <I2SEx_TxRxDMACplt+0x5a>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0202 	bic.w	r2, r2, #2
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	e01d      	b.n	8002666 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <I2SEx_TxRxDMACplt+0xd0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <I2SEx_TxRxDMACplt+0x90>
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <I2SEx_TxRxDMACplt+0xd4>)
 8002646:	e001      	b.n	800264c <I2SEx_TxRxDMACplt+0x94>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <I2SEx_TxRxDMACplt+0xd0>)
 8002654:	428b      	cmp	r3, r1
 8002656:	d101      	bne.n	800265c <I2SEx_TxRxDMACplt+0xa4>
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <I2SEx_TxRxDMACplt+0xd4>)
 800265a:	e001      	b.n	8002660 <I2SEx_TxRxDMACplt+0xa8>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002660:	f022 0202 	bic.w	r2, r2, #2
 8002664:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7fe f97e 	bl	800097c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40003800 	.word	0x40003800
 800268c:	40003400 	.word	0x40003400

08002690 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0203 	bic.w	r2, r2, #3
 80026ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <I2SEx_TxRxDMAError+0x78>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <I2SEx_TxRxDMAError+0x2c>
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <I2SEx_TxRxDMAError+0x7c>)
 80026ba:	e001      	b.n	80026c0 <I2SEx_TxRxDMAError+0x30>
 80026bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4910      	ldr	r1, [pc, #64]	; (8002708 <I2SEx_TxRxDMAError+0x78>)
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d101      	bne.n	80026d0 <I2SEx_TxRxDMAError+0x40>
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <I2SEx_TxRxDMAError+0x7c>)
 80026ce:	e001      	b.n	80026d4 <I2SEx_TxRxDMAError+0x44>
 80026d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d4:	f022 0203 	bic.w	r2, r2, #3
 80026d8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0208 	orr.w	r2, r3, #8
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff fb7e 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40003800 	.word	0x40003800
 800270c:	40003400 	.word	0x40003400

08002710 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c99      	adds	r1, r3, #2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6251      	str	r1, [r2, #36]	; 0x24
 8002722:	881a      	ldrh	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002750:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7fe f909 	bl	800097c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c99      	adds	r1, r3, #2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6251      	str	r1, [r2, #36]	; 0x24
 8002786:	8819      	ldrh	r1, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <I2SEx_TxISR_I2SExt+0x90>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <I2SEx_TxISR_I2SExt+0x22>
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <I2SEx_TxISR_I2SExt+0x94>)
 8002794:	e001      	b.n	800279a <I2SEx_TxISR_I2SExt+0x26>
 8002796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279a:	460a      	mov	r2, r1
 800279c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d121      	bne.n	80027fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <I2SEx_TxISR_I2SExt+0x90>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <I2SEx_TxISR_I2SExt+0x50>
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <I2SEx_TxISR_I2SExt+0x94>)
 80027c2:	e001      	b.n	80027c8 <I2SEx_TxISR_I2SExt+0x54>
 80027c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <I2SEx_TxISR_I2SExt+0x90>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d101      	bne.n	80027d8 <I2SEx_TxISR_I2SExt+0x64>
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <I2SEx_TxISR_I2SExt+0x94>)
 80027d6:	e001      	b.n	80027dc <I2SEx_TxISR_I2SExt+0x68>
 80027d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe f8c1 	bl	800097c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40003800 	.word	0x40003800
 8002808:	40003400 	.word	0x40003400

0800280c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68d8      	ldr	r0, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	1c99      	adds	r1, r3, #2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002824:	b282      	uxth	r2, r0
 8002826:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d113      	bne.n	8002868 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800284e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f88a 	bl	800097c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <I2SEx_RxISR_I2SExt+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <I2SEx_RxISR_I2SExt+0x16>
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <I2SEx_RxISR_I2SExt+0x94>)
 8002884:	e001      	b.n	800288a <I2SEx_RxISR_I2SExt+0x1a>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288a:	68d8      	ldr	r0, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	1c99      	adds	r1, r3, #2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002896:	b282      	uxth	r2, r0
 8002898:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d121      	bne.n	80028f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <I2SEx_RxISR_I2SExt+0x90>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <I2SEx_RxISR_I2SExt+0x50>
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <I2SEx_RxISR_I2SExt+0x94>)
 80028be:	e001      	b.n	80028c4 <I2SEx_RxISR_I2SExt+0x54>
 80028c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <I2SEx_RxISR_I2SExt+0x90>)
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d101      	bne.n	80028d4 <I2SEx_RxISR_I2SExt+0x64>
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <I2SEx_RxISR_I2SExt+0x94>)
 80028d2:	e001      	b.n	80028d8 <I2SEx_RxISR_I2SExt+0x68>
 80028d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7fe f843 	bl	800097c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40003800 	.word	0x40003800
 8002904:	40003400 	.word	0x40003400

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fa74 	bl	8000eac <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fa70 	bl	8000eac <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fa60 	bl	8000eac <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fa5c 	bl	8000eac <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fa15 	bl	8000eac <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fa11 	bl	8000eac <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe f9f4 	bl	8000eac <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe f9f0 	bl	8000eac <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe f9d4 	bl	8000eac <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe f9d0 	bl	8000eac <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f9bd 	bl	8000eac <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe f9b9 	bl	8000eac <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe f979 	bl	8000eac <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe f975 	bl	8000eac <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe f93a 	bl	8000eac <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f936 	bl	8000eac <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe f924 	bl	8000eac <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f920 	bl	8000eac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f8f4 	bl	8000eac <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f8f0 	bl	8000eac <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe f8c9 	bl	8000eac <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe f8c5 	bl	8000eac <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f8b2 	bl	8000eac <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f8ae 	bl	8000eac <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fd ffe0 	bl	8000eac <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fd ffdc 	bl	8000eac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ff40 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	080036a8 	.word	0x080036a8
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b094      	sub	sp, #80	; 0x50
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80e1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e0db      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ffc:	e0db      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003002:	e0d8      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4621      	mov	r1, r4
 8003050:	1a51      	subs	r1, r2, r1
 8003052:	6139      	str	r1, [r7, #16]
 8003054:	4629      	mov	r1, r5
 8003056:	eb63 0301 	sbc.w	r3, r3, r1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003068:	4659      	mov	r1, fp
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003072:	4651      	mov	r1, sl
 8003074:	018a      	lsls	r2, r1, #6
 8003076:	4651      	mov	r1, sl
 8003078:	ebb2 0801 	subs.w	r8, r2, r1
 800307c:	4659      	mov	r1, fp
 800307e:	eb63 0901 	sbc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	462b      	mov	r3, r5
 80030a4:	eb49 0303 	adc.w	r3, r9, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b6:	4629      	mov	r1, r5
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c0:	4621      	mov	r1, r4
 80030c2:	024a      	lsls	r2, r1, #9
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d4:	f7fd f88a 	bl	80001ec <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	e058      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	4611      	mov	r1, r2
 80030ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310e:	0150      	lsls	r0, r2, #5
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4641      	mov	r1, r8
 8003116:	ebb2 0a01 	subs.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003134:	ebb2 040a 	subs.w	r4, r2, sl
 8003138:	eb63 050b 	sbc.w	r5, r3, fp
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	f7fd f830 	bl	80001ec <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3750      	adds	r7, #80	; 0x50
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003200:	2b00      	cmp	r3, #0
 8003202:	d075      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003204:	4b91      	ldr	r3, [pc, #580]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800320a:	f7fd fe4f 	bl	8000eac <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003212:	f7fd fe4b 	bl	8000eac <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e189      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	4b8a      	ldr	r3, [pc, #552]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	4981      	ldr	r1, [pc, #516]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800325c:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003262:	0f1b      	lsrs	r3, r3, #28
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	071b      	lsls	r3, r3, #28
 800327c:	4974      	ldr	r1, [pc, #464]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003284:	4b72      	ldr	r3, [pc, #456]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f023 021f 	bic.w	r2, r3, #31
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	3b01      	subs	r3, #1
 8003294:	496e      	ldr	r1, [pc, #440]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	019a      	lsls	r2, r3, #6
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4964      	ldr	r1, [pc, #400]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c4:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ca:	f7fd fdef 	bl	8000eac <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032d2:	f7fd fdeb 	bl	8000eac <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e129      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003304:	2b00      	cmp	r3, #0
 8003306:	d079      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003308:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800330e:	f7fd fdcd 	bl	8000eac <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003316:	f7fd fdc9 	bl	8000eac <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e107      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003328:	4b49      	ldr	r3, [pc, #292]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d0ef      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	0f1b      	lsrs	r3, r3, #28
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	019a      	lsls	r2, r3, #6
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	493b      	ldr	r1, [pc, #236]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	3b01      	subs	r3, #1
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4934      	ldr	r1, [pc, #208]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01e      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003390:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	019a      	lsls	r2, r3, #6
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	071b      	lsls	r3, r3, #28
 80033b0:	4927      	ldr	r1, [pc, #156]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fd fd6a 	bl	8000eac <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033dc:	f7fd fd66 	bl	8000eac <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0a4      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808b 	beq.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003432:	f7fd fd3b 	bl	8000eac <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003438:	e010      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd fd37 	bl	8000eac <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d909      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e075      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800344c:	42470068 	.word	0x42470068
 8003450:	40023800 	.word	0x40023800
 8003454:	42470070 	.word	0x42470070
 8003458:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0e8      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d028      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003486:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034a2:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d114      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fd fcfd 	bl	8000eac <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd fcf9 	bl	8000eac <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e035      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ee      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e4:	d10d      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fa:	4912      	ldr	r1, [pc, #72]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
 8003500:	e005      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003508:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800351c:	4313      	orrs	r3, r2
 800351e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003534:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40007000 	.word	0x40007000
 8003544:	40023800 	.word	0x40023800
 8003548:	42470e40 	.word	0x42470e40
 800354c:	424711e0 	.word	0x424711e0

08003550 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d13e      	bne.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d12f      	bne.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003586:	617b      	str	r3, [r7, #20]
          break;
 8003588:	e02f      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003596:	d108      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e007      	b.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d4:	0f1b      	lsrs	r3, r3, #28
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
          break;
 80035e2:	e002      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
          break;
 80035e8:	bf00      	nop
        }
      }
      break;
 80035ea:	bf00      	nop
    }
  }
  return frequency;
 80035ec:	697b      	ldr	r3, [r7, #20]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00bb8000 	.word	0x00bb8000
 8003604:	007a1200 	.word	0x007a1200
 8003608:	00f42400 	.word	0x00f42400

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4d0d      	ldr	r5, [pc, #52]	; (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003612:	1b64      	subs	r4, r4, r5
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2600      	movs	r6, #0
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4d0b      	ldr	r5, [pc, #44]	; (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	; (8003650 <__libc_init_array+0x44>)
 8003620:	f000 f820 	bl	8003664 <_init>
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2600      	movs	r6, #0
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	080036c8 	.word	0x080036c8
 8003648:	080036c8 	.word	0x080036c8
 800364c:	080036c8 	.word	0x080036c8
 8003650:	080036cc 	.word	0x080036cc

08003654 <memset>:
 8003654:	4402      	add	r2, r0
 8003656:	4603      	mov	r3, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
